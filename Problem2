class Solution {
    public int rob(int[] nums) {
        //In this approach, we are tracking max at every previous house
        if(nums == null || nums.length == 0){
            return -1;
        }
        // skip is to track max amount if we skip the current house, pick will be max amount after picking it
        int skip = 0;
        int pick = nums[0];
        for(int i=1; i<nums.length; i++){
            // at every house, if we skip the house max will be max(skip previous house, picking previous house)
            int temp = skip;
            skip = Math.max(skip, pick);
            // pick will be nums[i] + skip for previous house
            pick = temp + nums[i];
        }
        //returning max between(skipping last house or picking it)
        return Math.max(skip, pick);
    }
}
