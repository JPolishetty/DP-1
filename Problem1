class Solution {
    public int coinChange(int[] coins, int amount) {
        //if no coins, no way to get amount
        if(coins == null || coins.length == 0){
            return -1;
        }
        //if amount is 0, 0 coins needed to make that amount
        if(amount == 0) return 0;
        int dp[][] = new int[coins.length + 1][amount + 1];
        // storing first row (i = 0) with 0 coins can't form any amount as infinity
        for(int i=0;i< dp[0].length;i++){
            dp[0][i] = Integer.MAX_VALUE - 1; // to avoid overflow
        }
        for(int i=1;i < dp.length; i++){
            for(int j=1; j<dp[0].length;j++){
                // If the current coin is greater than the amount, we can't include it so above row
                if(coins[i-1]>j){
                    dp[i][j] = dp[i-1][j];
                }
                // else taking the minimum between skipping the coin(above row) or 1+(dp[i][remainimg amount])
                else{
                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j- coins[i-1]] + 1);
                }
            }
        }
        //if there is no way of getting the amount, return -1
        if(dp[coins.length][amount] == Integer.MAX_VALUE - 1){
            return -1;
        }
        return dp[coins.length][amount];
    }
}
